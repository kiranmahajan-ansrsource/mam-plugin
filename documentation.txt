MAM Plugin LTI Application Documentation
==========================================

PROJECT OVERVIEW
=================
MAM Plugin is a full-stack LTI (Learning Tools Interoperability) application designed for integration with Brightspace LMS. It provides multimedia asset management capabilities through a plugin architecture, enabling users to search, browse, and insert media content within their learning management system.

TECHNICAL ARCHITECTURE
======================

Technology Stack:
- Frontend: TypeScript, Lit Web Components, Vite
- Backend: Node.js, Express.js, LTI.js
- Database: MongoDB
- Containerization: Docker
- Authentication: LTI 1.3 with OAuth

Project Structure:
- Root directory contains Dockerfile for containerized deployment
- Separated frontend and backend applications
- LTI integration for secure communication with Brightspace
- Rate limiting and validation middleware implementation

BACKEND APPLICATION
==================

Main Dependencies:
- Express.js 5.1.0 - Web application framework
- LTI.js 5.9.7 - LTI 1.3 protocol implementation
- Axios 1.10.0 - HTTP client for API requests
- Joi 18.0.0 - Data validation
- JSON Web Token 9.0.2 - Token handling
- Express Rate Limit 8.0.1 - API rate limiting

Application Structure:
/backend/src/
├── controllers/        # Request handling logic
├── middleware/         # Express middleware components
├── model/             # Data models
├── routes/            # API route definitions
├── utils/             # Utility functions and helpers
└── validators/        # Request validation schemas

Key Features:
- LTI 1.3 integration for secure authentication
- OAuth flow implementation
- Rate limiting for API protection
- Comprehensive logging system
- Role-based access control
- Deep linking support for content integration

Core Controllers:
- mayo.controller.js - Main application logic
- oauth.controller.js - OAuth authentication handling
- public.controller.js - Public endpoint management

Middleware Components:
- error.middleware.js - Global error handling
- rate-limitor.js - Request rate limiting
- validateRequest.js - Input validation

FRONTEND APPLICATION
===================

Main Dependencies:
- Lit 3.3.0 - Web Components library
- TypeScript 5.8.3 - Type-safe JavaScript
- Vite 7.0.0 - Build tool and dev server
- @brightspace-ui/core 3.151.0 - UI component library
- @vaadin/router 2.0.0 - Client-side routing
- Axios 1.10.0 - HTTP client

Application Structure:
/frontend/src/
├── components/        # Reusable UI components
├── pages/            # Route-specific page components
├── types/            # TypeScript type definitions
└── utils/            # Frontend utility functions

Key Components:
- search-page.ts - Media search interface
- details-page.ts - Asset detail view
- insert-page.ts - Content insertion interface
- prohibited-page.ts - Access denied page
- not-found-page.ts - 404 error page

Utility Components:
- details-list.ts - List display component
- image-container.ts - Image handling component
- loader-spinner.ts - Loading state component
- pageable-wrapper.ts - Pagination component
- search-bar.ts - Search input component
- thumbnail-list.ts - Thumbnail grid component
- toast-alert.ts - Notification system

DEPLOYMENT & CONFIGURATION
==========================

Docker Configuration:
- Multi-stage build process
- Node.js 20 base image
- Optimized production build
- Port 8080 exposed for application

Environment Variables Required:
- LTI_KEY - LTI application key
- MONGODB_URI - Database connection string
- PLATFORM_URL - LMS platform URL
- CLIENT_ID - OAuth client identifier
- AUTH_URL - Authentication endpoint
- TOKEN_URL - Token exchange endpoint
- KEYSET_URL - Public key set URL
- PORT - Application port (default: 8080)
- NODE_ENV - Environment mode
- ALLOWED_ORIGINS - CORS allowed origins

Security Features:
- CORS protection (currently commented out)
- Rate limiting on API endpoints
- Signed cookies for session management
- JWT token validation
- Role-based access control
- Secure cookie settings for production

LTI INTEGRATION
===============

Authentication Flow:
1. LTI launch from Brightspace
2. Token validation and user authentication
3. Role verification for access control
4. Cookie-based session establishment
5. Deep linking support for content insertion

Supported LTI Features:
- LTI 1.3 standard compliance
- Deep linking for content selection
- Role-based access (Instructor, Student, etc.)
- Platform context awareness
- Secure token handling

DEVELOPMENT WORKFLOW
===================

Backend Development:
- npm run dev - Development server with auto-reload
- npm start - Production server

Frontend Development:
- npm run dev - Vite development server
- npm run build - TypeScript compilation and build
- npm run preview - Preview production build

Docker Deployment:
- Build: docker build -t mam-plugin .
- Run: docker run -p 8080:8080 mam-plugin

API ENDPOINTS
=============

Protected Routes (require LTI authentication):
- GET / - Main application interface
- GET /deeplink - Deep linking interface
- /mayo/* - Core application API endpoints
- /oauth/* - OAuth authentication endpoints

Public Routes:
- /assets/* - Static asset serving
- /favicon.ico - Application icon
- /lang/en.js - Internationalization file
- /oauth/login - OAuth login endpoint
- /oauth/callback - OAuth callback handler
- /oauth/check - Authentication status check

ERROR HANDLING
==============

Error Management:
- Global error middleware for unhandled exceptions
- Custom error utilities for consistent error responses
- LTI-specific error handling for authentication failures
- Logging system for error tracking and debugging

Common Error Scenarios:
- Invalid LTI tokens (401 Unauthorized)
- Insufficient user roles (403 Forbidden)
- Rate limit exceeded (429 Too Many Requests)
- Invalid request data (400 Bad Request)
- Internal server errors (500 Internal Server Error)

LOGGING & MONITORING
===================

Logging Features:
- Comprehensive request/response logging
- JWT token decoding for debugging
- Deep linking request tracking
- Error logging with stack traces
- Separate log files for different operations

Log Files:
- deeplinkRequest.log - Deep linking requests
- deeplinkResponse.log - Deep linking responses

MAINTENANCE & UPDATES
=====================

Regular Maintenance Tasks:
- Monitor MongoDB database performance
- Review and rotate log files
- Update dependencies for security patches
- Monitor rate limiting effectiveness
- Review OAuth token expiration policies

Development Guidelines:
- Follow TypeScript best practices
- Implement proper error handling
- Use validation middleware for all inputs
- Maintain comprehensive logging
- Follow LTI 1.3 security guidelines

TROUBLESHOOTING
===============

Common Issues:
1. LTI Authentication Failures
   - Verify environment variables
   - Check platform configuration
   - Validate JWT tokens

2. CORS Errors
   - Review allowed origins configuration
   - Check cookie settings
   - Verify HTTPS requirements

3. Database Connection Issues
   - Validate MongoDB URI
   - Check network connectivity
   - Review authentication credentials

4. Rate Limiting Issues
   - Review rate limit configuration
   - Monitor API usage patterns
   - Adjust limits as needed

AUTHOR & MAINTENANCE
===================
Author: Kiran Mahajan
License: ISC
Project: MAM Plugin LTI testing
Keywords: LTI, Brightspace, Media Management

For technical support and maintenance, refer to the development team and ensure all environment variables are properly configured before deployment.